@page "/DownloadTikTok"
@using System.Text;
@using Newtonsoft.Json;
@using RestSharp;
@using BDCSharpModels.DataTransferModels.Video;

<h3>Download TikToc Video</h3>

<div class="container" @ref=_FileDownloadMainElement>
    <div class="row p-2">
        <div class="col">
            <div class="row p-2">
                <div class="col-md-12 d-flex justify-content-center"><input @bind="_VideoDownloadRequestModel.VideoURLForDownload" placeholder="Paste URL here ..." alt="Paste URL here ..." maxlength="1000" style="width:100%;" /></div>
            </div>
            <div class="row p-2">
                <div class="col-md-12 d-flex justify-content-center"><button class="btn btn-primary" @onclick="GetTikTokVideo">Download Video</button></div>
            </div>
            @if (_VideoDownloadResponseModel.WebPageURL != string.Empty)
            {
                <div class="row p-2">
                    <div class="col-md-12 d-flex justify-content-center">
                        <a href="@_VideoDownloadResponseModel.WebPageURL" class="btn btn-success" role="button" target="_blank">Open Link</a>
                    </div>
                </div>
                <div class="row p-2">
                    <div class="col-md-12 d-flex justify-content-center text-wrap">@_VideoDownloadResponseModel.WebPageURL</div>
                </div>
            }
            <LoadingOverlayComponent @ref=_LoadingOverlayFileDownloadMainElement />
        </div>
    </div>
    @if (_VideoDownloadResponseModel.WebPageURL != string.Empty)
    {
         <VideoDownloadPreviewComponent @ref=_VideoDownloadPreviewComponent VideoDownloadResponseModel="_VideoDownloadResponseModel"  />
    }
</div>
@code {

    private VideoDownloadRequestModel _VideoDownloadRequestModel { get; set; } = new VideoDownloadRequestModel();
    private VideoDownloadResponseModel _VideoDownloadResponseModel { get; set; } = new VideoDownloadResponseModel();

    private LoadingOverlayComponent _LoadingOverlayFileDownloadMainElement { get; set; }
    private ElementReference _FileDownloadMainElement { get; set; }

    private VideoDownloadPreviewComponent _VideoDownloadPreviewComponent { get; set; } = new VideoDownloadPreviewComponent();

    public async Task GetTikTokVideo()
    {
        string cleanURI = string.Empty;
        _LoadingOverlayFileDownloadMainElement.ShowLoadingOverlay(_FileDownloadMainElement);

        try
        {
            _VideoDownloadResponseModel.OriginalDownloadURL = _VideoDownloadRequestModel.VideoURLForDownload.Substring(_VideoDownloadRequestModel.VideoURLForDownload.IndexOf("https://www.tiktok.com"));
            int endOfURLIndex = _VideoDownloadRequestModel.VideoURLForDownload.IndexOf(" ");

            if (endOfURLIndex > 0)
                _VideoDownloadRequestModel.VideoURLForDownload = _VideoDownloadRequestModel.VideoURLForDownload.Substring(0, endOfURLIndex);

            Uri uri = new Uri(_VideoDownloadRequestModel.VideoURLForDownload);

            cleanURI = uri.GetLeftPart(UriPartial.Path);

            _VideoDownloadRequestModel.VideoURLForDownload = cleanURI;

            var client = new RestClient();
            string url = $"https://api.bdalldorf.tech/tiktok/filedownload/";
            var request = new RestRequest(url, Method.Post);
            request.AddBody(_VideoDownloadRequestModel);
            RestResponse response = client.Execute(request);

            _VideoDownloadResponseModel = JsonConvert.DeserializeObject<VideoDownloadResponseModel>(response.Content);
        }
        catch (Exception exception)
        {

        }
        finally
        {
            _LoadingOverlayFileDownloadMainElement.HideLoadingOverlay(_FileDownloadMainElement);
        }
    }
}
