@page "/ComponentsPage"
@inject IJSRuntime jsRuntime

<PageTitle>Components</PageTitle>
<h1>Components</h1>

<div class="container">
    <div class="row p-2">
        <div class="col">
            <div class="card">
                <h5 class="card-header bg-dark text-white">Phone Number Control</h5>
                <div class="card-body">
                    <div class="col-md-12 d-flex justify-content-left">
                        <PhoneNumberComponent @ref="FieldToFocusOn" />
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row p-2">
        <div class="col">
            <div class="card">
                <h5 class="card-header bg-dark text-white">SSN Number Control</h5>
                <div class="card-body">
                    <div class="col-md-8 d-flex justify-content-left">
                        <SSNNumberComponent />
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row p-2">
        <div class="col">
            <div class="card">
                <h5 class="card-header bg-dark text-white">Calendar Control</h5>
                <div class="card-body">
                    <div class="col-md-4 d-flex justify-content-left">
                        <CalendarComponent />
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row p-2">
        <div class="col">
            <div class="card">
                <h5 class="card-header bg-dark text-white">Integer Control</h5>
                <div class="card-body">
                    <div class="col-md-12 d-flex justify-content-left">
                        <IntegerComponent />
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row p-2">
        <div class="col">
        </div>
    </div>
    <div class="row p-2">
        <div class="col">
            <div class="card">
                <h5 class="card-header bg-dark text-white">Javascript Tests</h5>
                <div class="card-body">
                    <div class="col-md-8 d-flex justify-content-left">
                        <JavascriptTestComponent />
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row p-2">
        <div class="col">
            <div class="card">
                <h5 class="card-header bg-dark text-white">Download From Stream</h5>
                <div class="card-body">
                    <div class="col-md-8 d-flex justify-content-left">
                        <FileStreamDownloadComponent @ref=_FileStreamDownloadComponent OnClickCallback=DownloadImage />
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row p-2">
        <div class="col">
            <div class="card">
                <h5 class="card-header bg-dark text-white">Upload File To Stream</h5>
                <div class="card-body" @ref=_ShowLoadingPanelStreamUploadDiv>
                    <div class="row p-2">
                        <div class="col">
                            <FileStreamUploadComponent @ref=_FileStreamUploadComponent OnClickCallback=LoadImage ButtonText="Load File" ShowLoadingOverlay=false />
                        </div>
                    </div>
                    <div class="row p-2">
                        <div class="col d-flex justify-content-center">
                            <img src="@_ImageDataURL" alt="Example PNG Image" style="width:100%; max-width:100px; height:auto;">
                        </div>
                    </div>
                </div>
                <LoadingOverlayComponent @ref=_LoadingOverlayComponentFileStreamUpload />
            </div>
        </div>
    </div>
    <div class="row p-2">
        <div class="col">
            <div class="card">
                <h5 class="card-header bg-dark text-white">Loading Panel</h5>
                <div class="card-body" @ref=_ShowLoadingPanelDiv>
                    <div class="col-sm-auto p-2 d-flex justify-content-center">
                        <button class="btn btn-primary" @onclick="ShowLoadingPanel">Show Loading Panel</button>
                    </div>
                </div>
                <LoadingOverlayComponent @ref=_LoadingOverlayComponent />
            </div>
        </div>
    </div>
</div>

@code {
    // The FieldToFocusOn is just a reference to a field that you want to give focus.
    // In this case it's the PhoneNumberComponent.
    // You can use this to change which field is initially focused on.
    private PhoneNumberComponent FieldToFocusOn { get; set; }
    private Stream? TestStream { get; set; }
    private FileStreamDownloadComponent _FileStreamDownloadComponent { get; set; }
    private FileStreamUploadComponent _FileStreamUploadComponent { get; set; }

    private LoadingOverlayComponent _LoadingOverlayComponent { get; set; }
    private ElementReference _ShowLoadingPanelDiv { get; set; }

    private LoadingOverlayComponent _LoadingOverlayComponentFileStreamUpload{ get; set; }
    private ElementReference _ShowLoadingPanelStreamUploadDiv{ get; set; }
    private string _ImageDataURL = "icon-192.png";

    protected override async Task OnInitializedAsync()
    {
        // This will load the image into a stream and the Download Stream Component will handle it.
        //TestStream = new MemoryStream(File.ReadAllBytes("icon-192.png"));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            TestStream = new MemoryStream(File.ReadAllBytes($"Images/icon-192.png"));

            // This will change the focus to this field.
            await FieldToFocusOn.AsyncFocus();
        }
    }

    public async Task DownloadImage()
    {
        try
        {
            await _FileStreamDownloadComponent.DownloadFileFromStream("TestPicture.png", TestStream);
        }
        catch (Exception exception)
        {

        }
        finally
        {

        }
    }

    public async Task LoadImage()
    {
        try
        {
            await _LoadingOverlayComponentFileStreamUpload.ShowLoadingOverlay(_ShowLoadingPanelStreamUploadDiv);
            _ImageDataURL = await _FileStreamUploadComponent.LoadFileOnScreen();

        }
        catch (Exception exception)
        {

        }
        finally
        {
            await _LoadingOverlayComponentFileStreamUpload.HideLoadingOverlay(_ShowLoadingPanelStreamUploadDiv);
        }
    }

    public async Task ShowLoadingPanel()
    {
        try
        {
            await _LoadingOverlayComponent.ShowLoadingOverlay(_ShowLoadingPanelDiv);
            Thread.Sleep(3000);
        }
        catch (Exception exception)
        {

        }
        finally
        {
            await _LoadingOverlayComponent.HideLoadingOverlay(_ShowLoadingPanelDiv);
        }
    }
}
