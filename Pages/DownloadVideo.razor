@page "/DownloadVideo"
@using System.Text;
@using Newtonsoft.Json;
@using RestSharp;
@using BDCSharpModels.DataTransferModels.Video;

<h3>Download Video (Experimental)</h3>

<div class="container" @ref=_FileDownloadMainElement>
    <div class="row p-2">
        <div class="col">
            <div class="row p-2">
                <div class="col-md-12 d-flex justify-content-center"><input @bind="_VideoDownloadRequestModel.VideoURLForDownload" placeholder="Paste URL here ..." alt="Paste URL here ..." maxlength="1000" style="width:100%;" /></div>
            </div>
            <div class="row p-2">
                <div class="col-md-12 d-flex justify-content-center"><button class="btn btn-primary" @onclick="GetVideo">Download Video</button></div>
            </div>
            @if (_VideoDownloadResponseModel.WebPageURL != string.Empty)
            {
                <div class="row p-2">
                    <div class="col-md-12 d-flex justify-content-center">
                        <a href="@_VideoDownloadResponseModel.WebPageURL" class="btn btn-success" role="button" target="_blank">Open Link</a>
                    </div>
                </div>
                <div class="row p-2">
                    <div class="col-md-12 d-flex justify-content-center text-wrap">@_VideoDownloadResponseModel.WebPageURL</div>
                </div>
                <VideoDownloadPreviewComponent @ref=_VideoDownloadPreviewComponent VideoDownloadResponseModel="_VideoDownloadResponseModel"></VideoDownloadPreviewComponent>
            }
        </div>
    </div>
     <LoadingOverlayComponent @ref=_LoadingOverlayFileDownloadMainElement></LoadingOverlayComponent>
</div>
@code {

    private VideoDownloadRequestModel _VideoDownloadRequestModel { get; set; } = new VideoDownloadRequestModel();
    private VideoDownloadResponseModel _VideoDownloadResponseModel { get; set; } = new VideoDownloadResponseModel();

    private LoadingOverlayComponent _LoadingOverlayFileDownloadMainElement { get; set; }
    private ElementReference _FileDownloadMainElement { get; set; }

    private VideoDownloadPreviewComponent _VideoDownloadPreviewComponent { get; set; } = new VideoDownloadPreviewComponent();

    public async Task GetVideo()
    {
        string cleanURI = string.Empty;
        _LoadingOverlayFileDownloadMainElement.ShowLoadingOverlay(_FileDownloadMainElement);

        try
        {
            RestClient restClient = new RestClient();
            string urlAPI = APIRoutes.PHDownloadRoute.FileDownload;
            var restRequest = new RestRequest(urlAPI, Method.Post);
            restRequest.AddBody(_VideoDownloadRequestModel);
            RestResponse restResponse = restClient.Execute(restRequest);

            _VideoDownloadResponseModel = JsonConvert.DeserializeObject<VideoDownloadResponseModel>(restResponse.Content);
        }
        catch (Exception exception)
        {

        }
        finally
        {
            _LoadingOverlayFileDownloadMainElement.HideLoadingOverlay(_FileDownloadMainElement);
        }
    }
}
